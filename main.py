# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup
from my_project import yandex_maps, video_module, geohelper

REQUEST_KWARGS = {
    'proxy_url': 'socks5://47.241.16.16:1080',  # –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
    'urllib3_proxy_kwargs': {
        'assert_hostname': 'False',
        'cert_reqs': 'CERT_NONE'}
    #     'username': 'user',
    #     'password': 'password'
    # }
}


def find_video(update, context):
    topomym = update.message.text
    try:
        video = '\n'.join(video_module.search_video(topomym))
        update.message.reply_text(
            video
        )
    except Exception as error:
        print(error)
        update.message.reply_text(
            f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{update.message.text}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. '
        )


def find_sights(update, context):
    topomym = update.message.text
    try:
        need_url, sights = yandex_maps.create_sights(topomym)
        description = '\n'.join(
            [str(x[0]) + '  -   "' + x[1]['name'] + '"' + '\n–ê–¥—Ä–µ—Å:     ' + x[1]['address'] for x in sights.items()])
        context.bot.send_photo(
            update.message.chat_id,
            need_url,
            caption=description
        )
    except yandex_maps.ToponymError:
        update.message.reply_text(
            f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{update.message.text}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. '
        )
    except yandex_maps.SightsError:
        update.message.reply_text(
            f'–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –º–∞–ª–æ–≤–∞—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π!'
        )


def start_command(update, context):
    reply_keyboard = [["–í–∑–ª–µ—Ç–∞–µ–º!‚úà"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã\n'
        '–Ø - –±–æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –í—Å–µ –º—ã —Å–µ–π—á–∞—Å –≤ –Ω–µ–ø—Ä–æ—Å—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, '
        '–∫–æ–≥–¥–∞ –æ–±—ã—á–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å—Ç–∞–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ üò¢.\n' +
        '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—â—É—â–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä–æ—é –¥–≤–µ—Ä—å –≤ –º–∏—Ä –æ–Ω–ª–∞–π–Ω-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–πüåéÔ∏è!\n',
        reply_markup=markup
    )
    return 1


def pre_flight(update, context):
    reply_keyboard = [['–¥–∞', '–Ω–µ—Ç']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(
        '–í—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –ø—É–Ω–∫—Ç–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?\n',
        reply_markup=markup
    )
    return 2


def wait_data(update, context):
    context.user_data['country'] = None
    context.user_data['city'] = None

    update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É:\n'
    )
    return 3


def choose_place(update, context):
    print(not context.user_data["country"], not context.user_data["city"])
    if not context.user_data["country"]:
        if not geohelper.define_toponym('countries', update.message.text):
            update.message.reply_text(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n')
        else:
            context.user_data['country'] = update.message.text
            update.message.reply_text(
                '–ü—Ä–∏–Ω—è—Ç–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:\n')
        return 3
    elif not context.user_data["city"]:
        if not geohelper.define_toponym('cities', update.message.text):
            update.message.reply_text(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n')
            return 3
        else:
            context.user_data['city'] = update.message.text
        reply_keyboard = [['–í—Å–µ –≤–µ—Ä–Ω–æ‚úÖ'], ['–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ‚ùå']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text(
            f'–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∏–ª–µ—Ç–µ: {context.user_data["country"], context.user_data["city"]}.',
            reply_markup=markup)
    return 4


def lets_go(update, context):
    keyboard = [[InlineKeyboardButton("–í–∏–¥–µ–æ-—ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data='1'),
                 InlineKeyboardButton("–§–æ—Ç–æ-—ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data='2')]]
    markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—Ç–µ–≥–Ω–∏—Ç–µ —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–ø–∏–Ω–∫–∏ –∫—Ä–µ—Å–µ–ª –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ...\n'
        '–ú—ã —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ! –¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –Ω–∞—à–µ–≥–æ —Ç—É—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å:',
        reply_markup=markup)


def stop(update, context):
    update.message.reply_text(
        '–û—á–µ–Ω—å –∂–∞–ª—å!')
    return ConversationHandler.END


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç updater.
    updater = Updater('1125322487:AAFql3B0ov5mMDFdUrFQIUJDAhfw7XR3wLw', use_context=True,
                      request_kwargs=REQUEST_KWARGS)
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.
    dp = updater.dispatcher

    # updater.dispatcher.add_handler(CommandHandler('start', start_command))
    # updater.dispatcher.add_handler(CallbackQueryHandler(button))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],

        states={
            1: [MessageHandler(Filters.text, pre_flight, pass_user_data=True),
                ],
            2: [MessageHandler(Filters.text('–¥–∞'), wait_data, pass_user_data=True),
                MessageHandler(Filters.text('–Ω–µ—Ç'), stop),
                ],
            3: [MessageHandler(Filters.text, choose_place, pass_user_data=True)
                ],
            4: [MessageHandler(Filters.text('–í—Å–µ –≤–µ—Ä–Ω–æ‚úÖ'), lets_go, pass_user_data=True),
                MessageHandler(Filters.text('–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ‚ùå'), wait_data, pass_user_data=True),
                ]
        },

        fallbacks=[CommandHandler("stop", stop)]
    )

    dp.add_handler(conv_handler)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    updater.start_polling()

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    updater.idle()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
